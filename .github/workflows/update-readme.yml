name: Update Problem Count and Index

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write   # allow this workflow to push commits

jobs:
  update-readme:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Generate problem count and index (in-place)
        run: |
          python3 - << 'PY'
          import os, re, sys, pathlib

          ROOT = pathlib.Path(".").resolve()
          README = ROOT / "README.md"

          # Folders to ignore at repo root
          IGNORE = {".git", ".github", "scripts", ".vscode", ".idea", "__pycache__", "assets"}
          
          # Collect candidate problem directories at repo root
          dirs = []
          for d in sorted(p for p in ROOT.iterdir() if p.is_dir()):
              name = d.name
              if name in IGNORE or name.startswith(".") or name.startswith("_"):
                  continue
              dirs.append(d)

          # Sort: if folder starts with number-..., sort numerically; else alpha
          def sort_key(p: pathlib.Path):
              n = p.name
              if "-" in n:
                  first = n.split("-")[0]
                  if first.isdigit():
                      return (0, int(first), n.lower())
              return (1, n.lower())
          dirs.sort(key=sort_key)

          # Count problems as number of problem folders
          problem_count = len(dirs)

          # Build index table
          lines = []
          lines.append("## ðŸ“Š Problem Count")
          lines.append(f"**Total Problems Solved:** {problem_count}")
          lines.append("")
          lines.append("## ðŸ“š Problem Index")
          lines.append("")
          lines.append("| # | Folder | Description | Solution |")
          lines.append("|---:|--------|-------------|----------|")

          rownum = 0
          for d in dirs:
              rownum += 1
              folder = d.name
              # Description = first non-empty line from the folder's README.md (if present)
              desc = ""
              folder_readme = d / "README.md"
              if folder_readme.exists():
                  with open(folder_readme, "r", encoding="utf-8", errors="ignore") as f:
                      for line in f:
                          s = line.strip()
                          if s:
                              desc = s
                              break
              # Find a .cpp solution (first one)
              cpp = "-"
              for child in sorted(d.iterdir()):
                  if child.is_file() and child.suffix == ".cpp":
                      cpp = f"[{child.name}]({folder}/{child.name})"
                      break

              lines.append(f"| {rownum} | [{folder}]({folder}) | {desc} | {cpp} |")

          generated = "\n".join(lines) + "\n"

          # Read root README and replace content between markers
          if not README.exists():
              print("Root README.md not found.", file=sys.stderr)
              sys.exit(1)

          content = README.read_text(encoding="utf-8")
          start_marker = r"<!-- AUTO-GEN: START \(do not remove or edit this line\) -->"
          end_marker   = r"<!-- AUTO-GEN: END -->"

          pattern = re.compile(
              start_marker + r".*?" + end_marker,
              flags=re.DOTALL
          )

          replacement = f"<!-- AUTO-GEN: START (do not remove or edit this line) -->\n{generated}<!-- AUTO-GEN: END -->"

          if pattern.search(content):
              content = pattern.sub(replacement, content)
          else:
              # If markers missing, append at end (keeps you safe)
              content = content.rstrip() + "\n\n" + replacement + "\n"

          README.write_text(content, encoding="utf-8")
          print(f"Updated README with {problem_count} problems.")
          PY

      - name: Commit and push changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add README.md
          git commit -m "Auto-update README: problem count & index" || echo "No changes to commit"
          git push
